type User {
    id: Int
    name: String
    email: String
    password: String
    posts: [Post]
    followed: [Follow]
}

enum PostType {
    image
    text
    link
}
type Post {
    id: Int
    respond: Int
    author: User
    type: PostType
    content: String
    date: String
}

type Reaction {
    user: User,
    post: Post,
    reactionType: String
}

type Follow {
    follower: User
    followed: User
}

type Query {
    hello(name: String): String,
    users(id: Int, name: String, email: String, password: String): [User]
    posts(id: Int, respond: Int, author: Int, type: PostType, content: String, date: String): [Post]
    reactions(userId: Int, postId: Int, reactionType: String): [Reaction]
    follow(followerId: Int, followedId: Int): [Follow]
}

type Mutation {
#    User
    addUser(name:String!, email:String!, password:String!): User
    updateUser(id:Int!, name:String, email:String, password:String): User
    delUser(id:Int!): User

#    Posts
    addPost(author:Int!, type:PostType!, content:String, date:String!): Post
    delPost(id:Int!): Post
}